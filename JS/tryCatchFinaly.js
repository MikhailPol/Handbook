/*
Конструкция try-catch-finally в JavaScript позволяет совместно использовать try-catch для обработки исключений и finally для выполнения кода независимо от наличия или отсутствия исключений.
С помощью оператора throw мы можем выбрасывать различные типы ошибок, включая стандартные ошибки JavaScript, такие как Error, TypeError, RangeError и другие. Мы также можем определить собственные типы ошибок, наследуясь от объекта Error.
*/
// function divide(a, b) {
//   try {
//     if(typeof(a) !== 'number' || typeof(b) !== 'number') {
//       throw new Error('Задайте корректные параметры функции (числовые)');
//     };
//     if(b === 0) {
//       throw new Error('Деление на 0 невозможно')
//     };
//     console.log(a / b)
//   } catch (error) {
//     console.log(`Ошибка: ${error.message} ^_^`);
//   } finally {
//     console.log(`Блок кода finally отработает всегда`)
//   };
// };
// divide(2, 2); //1, Блок кода finally отработает всегда
// divide('1', '1'); //Ошибка: Задайте корректные параметры функции (числовые) ^_^, Блок кода finally отработает всегда
// divide(); //Ошибка: Задайте корректные параметры функции (числовые) ^_^, Блок кода finally отработает всегда
// divide(1, 0);//Ошибка: Деление на 0 невозможно ^_^, Блок кода finally отработает всегда
/*
*** try..catch работает синхронно. Исключение, которое произойдёт в коде, запланированном «на будущее», например в setTimeout try..catch не поймает
Чтобы поймать исключение внутри запланированной функции, try..catch должен находиться внутри самой этой функции***
*/
// try {
//   setTimeout(function() {
//     noSuchVariable; // скрипт упадёт тут
//   }, 1000);
// } catch (e) {
//   console.log( "не сработает" );
// }

// setTimeout(function() {
//   try {
//     noSuchVariable; // try..catch обрабатывает ошибку!
//   } catch {
//     console.log( "ошибка поймана!" );
//   }
// }, 1000);

/*
В объекте ошибки JavaScript (Error) есть несколько основных свойств. Некоторые из них включают:
1. name: Название ошибки. Обычно равно "Error".
2. message: Сообщение об ошибке, предоставленное разработчиком.
3. stack: Строка с информацией о стеке вызовов. Это свойство содержит трассировку стека, которая указывает, какие функции вызывались перед возникновением ошибки.
Кроме того, у объекта ошибки могут быть дополнительные свойства, которые зависят от конкретного типа ошибки. Например, для ошибки типа TypeError есть дополнительное свойство type, которое указывает на тип ошибки.
*/
// function gerError() {
//   try {
//     exampleVariable;
//   } catch (e) {
//     console.log(e.name); //ReferenceError
//     console.log(e.message); //exampleVariable is not defined
//     console.log(e.stack) //....
//   };
// };
// gerError();