/*
setInterval и setTimeout - это две функции в JavaScript, которые позволяют выполнять код с задержкой или периодически повторять его выполнение.

1. setTimeout: Эта функция позволяет выполнить определенный кусок кода через заданное количество времени. Она принимает аргументы: функцию(или ссылку на функию, без ()) или код, который нужно выполнить, и время задержки в миллисекундах, и аргументы для передаваемой функции. После заданной задержки, код будет выполнен один раз.
*/
// function greet(name) {
//   console.log(`Hi, ${name}`)
// }
// setTimeout(greet, 3000, ['Mik']); //Через 3 секунды в консоль выведет Hi, Mik.

/*2. setInterval: Эта функция позволяет выполнять определенный код повторно через заданное время. Она также принимает аргументы - функцию или ссылку на нее, интервал времени в миллисекундах между каждым выполнением,
аргументы для функции. Код будет выполняться бесконечно, пока не будет явно остановлен с помощью другой функции или условия.
*/
// function greet(name) {
//   console.log(`Hi, ${name}`)
// }
// setInterval(greet, 1000, ['Mik']); // через каждую секунду в консоль будет выводится Hi, Mik.
/*
3. Оба метода setTimeout и setInterval возвращают идентификатор таймера, который может быть использован позже для отмены выполнения с помощью функции clearTimeout или clearInterval. clearTimeout используется для отмены таймера, созданного с помощью setTimeout, а clearInterval используется для отмены таймера, созданного с помощью setInterval.
*/
// let timerId = setTimeout(() => console.log('ничего не будет!'), 3000);
// console.log(timerId._idleStart); //Идентификатор таймера.
// clearTimeout(timerId); //Отменяем таймер
// console.log(timerId._idleStart);// Такой же идентификатор. Не возвращает null после отмены.

// function printMessage() {
//   let counter = 0;
//   let intervalId = setInterval(() => {
//     counter++;
//     console.log(`Вывод в консоль: ${counter}`)
//   }, 2000); // Каждые 2 секунды будет выводить в консоль сообщение о выводе.

//   setTimeout(() => {
//     clearInterval(intervalId);
//     console.log('Остановка функции printMessage!')
//   }, 11_000); //Остановит вывод в консоль через 11 секунд.
// };
// printMessage();
/*
4. setTimeout с нулевой задержкой.
Если задержка для setTimeout установлена на 0 миллисекунд (т.е. setTimeout(callback, 0)`), это означает, что переданный в `setTimeout callback будет выполнен как можно скорее после завершения текущего выполнения кода.
Т.е. не гарантирует мгновенного выполнения. Вместо этого, она добавляет callback в очередь задач и позволяет браузеру освободить поток выполнения для других задач, прежде чем вернуться к выполнению callback.
*/
// console.log('Start!'); //1
// setTimeout(() => console.log('Timeout callback'), 0); //3
// console.log('End!'); //2
/*
5.Вложенный setTimeout. Вложенный setTimeout – более гибкий метод, чем setInterval. С его помощью последующий вызов может быть задан по-разному в зависимости от результатов предыдущего.
*/
// let timerId = setTimeout(function tick() {
//   console.log('Вывод timerId');
//   timerId = setTimeout(tick, 2000);
// }, 2000); // Будет вывыодить в консоль сообщение каждые 2 секунды.